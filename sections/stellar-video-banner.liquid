<style>
    .section-{{ section.id }}-margin{
        margin-bottom: {{ section.settings.margin_bottom_Desktop }}px;
        margin-top: {{ section.settings.margin_top_Desktop }}px;
    }
  
  
      .homepage-video-container .mobile-video {
        display: none;
        line-height: 0;
    }
  
    .homepage-video-container .video-wrapper{
      line-height: 0;
      position: relative;
      background: #000;
    }

    .homepage-video-container .video_container {
      position: relative;
      width: 100%;
      height: 100%;
      max-width:1512px;
      margin:auto;
    }

    .homepage-video-container video {
      width: 100%;
      height: 100%;
      object-fit: cover;
      background: #000;
      aspect-ratio:1512/801;
    }
  
    @media screen and (max-width: 768px) {
        .section-{{ section.id }}-margin{
            margin-bottom: {{ section.settings.margin_bottom_Mobile }}px;
            margin-top: {{ section.settings.margin_top_Mobile }}px;
        }
        .homepage-video-container .desktop-video {
            display: none;
          }
  
        .homepage-video-container .mobile-video {
            display: block;
            line-height: 0;
        }
         .homepage-video-container video {
             aspect-ratio: 428 / 558; /* or aspect-ratio: 3 / 4; */
        }
    }
  </style>
  {% if section.settings.video_desktop != blank and section.settings.video_mobile != blank %}
    <section class="homepage-video-container section-{{ section.id }}-margin" id="{{ section.id }}">
      <div class="full-vh-height video-wrapper">
        {% if section.settings.video_desktop != null %}
          <div class="video_container desktop-video" onclick="playVideo(this)">
            <video
              class="homepage_video"
              playsinline
              muted
              loop
              {% if section.settings.show_video_control %}
                controls
              {% endif %}
              {% if section.settings.poster_desktop != blank %}
                poster="{{ section.settings.poster_desktop | image_url: width: 1920 }}"
              {% endif %}
              preload="metadata"
              width="100%"
              height="100%"
            >
              {% for source in section.settings.video_desktop.sources %}
                <source src="{{ source.url }}" type="{{ source.mime_type }}">
              {% endfor %}
            </video>


          </div>
        {% endif %}

        {% if section.settings.video_mobile != null %}
          <div class="video_container mobile-video" onclick="playVideo(this)">
            <video
              class="homepage_video"
              playsinline
              muted
              loop
              {% if section.settings.show_video_control %}
                controls
              {% endif %}
              {% if section.settings.poster_mobile != blank %}
                poster="{{ section.settings.poster_mobile | image_url: width: 1920 }}"
              {% endif %}
              preload="metadata"
              width="100%"
              height="100%"
            >
              {% for source in section.settings.video_mobile.sources %}
                <source src="{{ source.url }}" type="{{ source.mime_type }}">
              {% endfor %}
            </video>

          </div>
        {% endif %}
      </div>
    </section>
  {% endif %}
  
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Load first frame for videos without poster
      const videos = document.querySelectorAll('#{{ section.id }} .homepage_video');
      videos.forEach((video) => {
        // If no poster attribute, load the video metadata to show first frame
        if (!video.hasAttribute('poster') || video.getAttribute('poster') === '') {
          video.load();
          // Set current time to 0.1 seconds to ensure a frame is captured
          video.addEventListener('loadedmetadata', function() {
            if (this.duration) {
              this.currentTime = 0.1;
            }
          }, { once: true });
        }
      });

      const observerOptions = {
        root: null,
        threshold: 0.3, // Play when 30% of video is visible
        rootMargin: '0px'
      };
  
      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          const video = entry.target;
  
          if (entry.isIntersecting) {
            // Video is in viewport - play it
            const playPromise = video.play();
            
            if (playPromise !== undefined) {
              playPromise.catch((error) => {
                console.log('Video autoplay prevented:', error);
                // Autoplay was prevented, video will need user interaction
              });
            }
          } else {
            // Video is out of viewport - pause it
            if (!video.paused) {
              video.pause();
            }
            // Reset to first frame if no poster is set
            if (!video.hasAttribute('poster') || video.getAttribute('poster') === '') {
              video.currentTime = 0.1;
            }
          }
        });
      }, observerOptions);
  
      // Observe all video elements
      videos.forEach((video) => {
        observer.observe(video);
      });
    });
  </script>
  
  {% if section.settings.show_video_control != true %}
    <script>
      function playVideo(ele) {
        let video_wrapper = ele.closest('.video-wrapper');
        let video = ele.querySelector('video');
  
        if (video.paused) {
          video.play();
          if (video_wrapper.querySelector('.play-btn')) {
            video_wrapper.querySelector('.play-btn').style.display = 'none';
          }
        } else {
          video.pause();
          if (video_wrapper.querySelector('.play-btn')) {
            video_wrapper.querySelector('.play-btn').style.display = 'block';
          }
        }
      }
    </script>
  {% endif %}

  {% if section.settings.parallax_enabledisable %}  
<script>
document.addEventListener("DOMContentLoaded", () => {
  const sectionElement = document.querySelector(".section-{{ section.id }}-margin");
  if (!sectionElement) return;
   const sectionOffset = sectionElement.offsetTop;
  const sectionHeight = sectionElement.clientHeight;
  const desktopVideos = sectionElement.querySelectorAll(".desktop-video video");
  const mobileVideos = sectionElement.querySelectorAll(".mobile-video video");
  console.log("sectionOffset", sectionOffset);
  window.addEventListener("scroll", () => {
    const scrollY = window.scrollY || window.pageYOffset;
    if (scrollY < sectionHeight) {
      desktopVideos.forEach(video => {
        video.style.transform = `translateY(${scrollY / 3}px)`;
      });
      mobileVideos.forEach(video => {
        video.style.transform = `translateY(${scrollY / 3}px)`;
      });
    }
  });
});
</script>
{% endif %}
  
  {% schema %}
  {
    "name": "Stellar Video Section",
    "settings": [
       {
        "type": "range",
        "id": "margin_top_Desktop",
        "min": 0,
        "max": 100,
        "step": 1,
        "default": 4,
        "unit": "px",
        "label": "Margin Top (Desktop)"
      },
      {
        "type": "range",
        "id": "margin_bottom_Desktop",
        "min": 0,
        "max": 100,
        "step": 1,
        "default": 20,
        "unit": "px",
        "label": "Margin Bottom (Desktop)"
      },
      {
        "type": "range",
        "id": "margin_top_Mobile",
        "min": 0,
        "max": 100,
        "step": 1,
        "default": 4,
        "unit": "px",
        "label": "Margin Top (Mobile)"
      },
      {
        "type": "range",
        "id": "margin_bottom_Mobile",
        "min": 0,
        "max": 100,
        "step": 1,
        "default": 20,
        "unit": "px",
        "label": "Margin Bottom (Mobile)"
      },
      {
        "type": "video",
        "id": "video_desktop",
        "label": "Desktop Video"
      },
      {
        "type": "image_picker",
        "id": "poster_desktop",
        "label": "Desktop Video Poster Image",
        "info": "Displayed while video is loading or paused"
      },
      {
        "type": "video",
        "id": "video_mobile",
        "label": "Mobile Video"
      },
      {
        "type": "image_picker",
        "id": "poster_mobile",
        "label": "Mobile Video Poster Image",
        "info": "Displayed while video is loading or paused"
      },
      {
        "type": "checkbox",
        "id": "show_video_control",
        "label": "Show Video Control",
        "default": true
      },
      {
      "type": "checkbox",
      "id": "parallax_enabledisable",
      "label": "Parallax Enable/Disable"
      }

    ],
    "presets": [
      {
        "name": "Stellar Video Section"
      }
    ]
  }
  {% endschema %}
  