{% comment %}
  Renders product buy-buttons.
  Accepts:
  - product: {Object} product object.
  - block: {Object} passing the block information.
  - product_form_id: {String} product form id.
  - section_id: {String} id of section to which this snippet belongs.
  - show_pickup_availability: {Boolean} for the pickup availability. If true the pickup availability is rendered, false - not rendered (optional).

  Usage:
  {% render 'buy-buttons', block: block, product: product, product_form_id: product_form_id, section_id: section.id, show_pickup_availability: true %}
{% endcomment %}
<style></style>
<div {{ block.shopify_attributes }}>
  {%- if product != blank -%}
    {%- liquid
      assign gift_card_recipient_feature_active = false
      if block.settings.show_gift_card_recipient and product.gift_card?
        assign gift_card_recipient_feature_active = true
      endif

      assign show_dynamic_checkout = false
      if block.settings.show_dynamic_checkout and gift_card_recipient_feature_active == false
        assign show_dynamic_checkout = true
      endif
    -%}

    <product-form
      class="product-form"
      data-hide-errors="{{ gift_card_recipient_feature_active }}"
      data-section-id="{{ section.id }}"
    >
      <div class="product-form__error-message-wrapper" role="alert" hidden>
        {% comment %}
          <svg
            aria-hidden="true"
            focusable="false"
            class="icon icon-error"
            viewBox="0 0 13 13"
          >
            <circle cx="6.5" cy="6.50049" r="5.5" stroke="white" stroke-width="2"/>
            <circle cx="6.5" cy="6.5" r="5.5" fill="#EB001B" stroke="#EB001B" stroke-width="0.7"/>
            <path d="M5.87413 3.52832L5.97439 7.57216H7.02713L7.12739 3.52832H5.87413ZM6.50076 9.66091C6.88091 9.66091 7.18169 9.37267 7.18169 9.00504C7.18169 8.63742 6.88091 8.34917 6.50076 8.34917C6.12061 8.34917 5.81982 8.63742 5.81982 9.00504C5.81982 9.37267 6.12061 9.66091 6.50076 9.66091Z" fill="white"/>
            <path d="M5.87413 3.17832H5.51535L5.52424 3.537L5.6245 7.58083L5.63296 7.92216H5.97439H7.02713H7.36856L7.37702 7.58083L7.47728 3.537L7.48617 3.17832H7.12739H5.87413ZM6.50076 10.0109C7.06121 10.0109 7.5317 9.57872 7.5317 9.00504C7.5317 8.43137 7.06121 7.99918 6.50076 7.99918C5.94031 7.99918 5.46982 8.43137 5.46982 9.00504C5.46982 9.57872 5.94031 10.0109 6.50076 10.0109Z" fill="white" stroke="#EB001B" stroke-width="0.7">
          </svg>
        {% endcomment %}
        <span class="atc_Error_Message">Please select a size before adding to cart.</span>
        {% comment %} <span class="product-form__error-message"></span> {% endcomment %}
      </div>

      {%- form 'product',
        product,
        id: product_form_id,
        class: 'form ',
        novalidate: 'novalidate',
        data-type: 'add-to-cart-form'
      -%}
        <input
          type="hidden"
          name="id"
          value="{{ card_product.selected_or_first_available_variant.id }}"
          class="product-variant-id-hello"
        >
        {% assign productType = product.type | handleize %}
        {% assign defaultValueOption1 = product.metafields.custom.default_value_of_the_product_for_the_option_1 %}
        {% assign defaultValueOption2 = product.metafields.custom.default_value_of_the_product_for_the_option_2 %}
        {% assign defaultValueOption3 = product.metafields.custom.color.value %}
        {% assign optionTitle1 = shop.metaobjects.define_products_variant_title[productType].variant_type_1_title.value %}
        {% assign optionTitle2 = shop.metaobjects.define_products_variant_title[productType].variant_type_2_title.value %}
        {% assign optionTitle3 = shop.metaobjects.define_products_variant_title[productType].variant_type_3_title.value %}

        {% if defaultValueOption1 and optionTitle1 %}
          <input
            class="option-chill1 hidden"
            style="visibility:hidden;"
            type="text"
            name="properties[{{ optionTitle1 }}]"
            value="{{ defaultValueOption1 }}"
          >
        {% endif %}

        {% if defaultValueOption2 and optionTitle2 %}
          <input
            class="option-chill1 hidden"
            style="visibility:hidden;"
            type="text"
            name="properties[{{ optionTitle2 }}]"
            value="{{ defaultValueOption2 }}"
          >
        {% endif %}
        {% if defaultValueOption3.color_name and optionTitle3 %}
          <input
            class="option-chill1 hidden"
            style="visibility:hidden;"
            type="text"
            name="properties[{{ optionTitle3 }}]"
            value="{{ defaultValueOption3.color_name }}"
          >
        {% endif %}

        {%- if gift_card_recipient_feature_active -%}
          {%- render 'gift-card-recipient-form', product: product, form: form, section: section -%}
        {%- endif -%}

      {%- if show_dynamic_checkout -%}
        <div class="product-form__buttons">
          {%- liquid
            assign check_against_inventory = true
            if product.selected_or_first_available_variant.inventory_management != 'shopify' or product.selected_or_first_available_variant.inventory_policy == 'continue'
              assign check_against_inventory = false
            endif
            if product.selected_or_first_available_variant.quantity_rule.min > product.selected_or_first_available_variant.inventory_quantity and check_against_inventory
              assign quantity_rule_soldout = true
            endif
          -%}
          {% comment %}
            <button
              id="ProductSubmitButton-{{ section_id }}"
              type="submit"
              name="add"
              class="product-form__submit button button--full-width {% if show_dynamic_checkout %}button--secondary{% else %}button--primary{% endif %}"
              {% if product.selected_or_first_available_variant.available == false or quantity_rule_soldout %}
                disabled
              {% endif %}
            >
              <span>
                {%- if product.selected_or_first_available_variant.available == false or quantity_rule_soldout -%}
                  {{ 'products.product.sold_out' | t }}
                {%- else -%}
                  {{ 'products.product.add_to_cart' | t }}
                {%- endif -%}
              </span>
              <div class="loading-overlay__spinner hidden">
                <svg
                  aria-hidden="true"
                  focusable="false"
                  class="spinner"
                  viewBox="0 0 66 66"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
                </svg>
              </div>
            </button>
          {% endcomment %}
            {{ form | payment_button }}
            <button
              {% if product.selected_or_first_available_variant.available == false or quantity_rule_soldout %}
                disabled
              {% endif %}
              onclick="checkoutFunctionality(event)"
              class="hidden shopify-payment-button__button--unbranded"
              id="custom_buy_button"
            >
              BUY NOW
            </button>  
        </div>
             {%- endif -%}

        <button
          id="ProductSubmitButton-{{ section_id }}"
          type="submit"
          name="add"
          class="pdp_ATC product-form__submit button button--full-width {% if show_dynamic_checkout %}button--secondary{% else %}button--primary{% endif %}"
          {% if product.selected_or_first_available_variant.available == false or quantity_rule_soldout %}
            disabled
          {% endif %}
        >
          <span>
            {%- if product.selected_or_first_available_variant.available == false or quantity_rule_soldout -%}
              {{ 'products.product.sold_out' | t }}
            {%- else -%}
              {{ 'products.product.add_to_cart' | t }}
            {%- endif -%}
          </span>
          <div class="loading-overlay__spinner hidden">
            <svg
              aria-hidden="true"
              focusable="false"
              class="spinner"
              viewBox="0 0 66 66"
              xmlns="http://www.w3.org/2000/svg"
            >
              <circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
            </svg>
          </div>
        </button>
      {%- endform -%}
    </product-form>
  {%- else -%}
    <div class="product-form">
      <div class="product-form__buttons form">
        <button
          type="submit"
          name="add"
          class="pdp_ATC product-form__submit button button--full-width button--primary"
          disabled
        >
          {{ 'products.product.sold_out' | t }}
        </button>
      </div>
    </div>
  {%- endif -%}

  {%- if show_pickup_availability -%}
    {{ 'component-pickup-availability.css' | asset_url | stylesheet_tag }}

    {%- assign pick_up_availabilities = product.selected_or_first_available_variant.store_availabilities
      | where: 'pick_up_enabled', true
    -%}

    <pickup-availability
      class="product__pickup-availabilities no-js-hidden quick-add-hidden"
      {% if product.selected_or_first_available_variant.available and pick_up_availabilities.size > 0 %}
        available
      {% endif %}
      data-root-url="{{ routes.root_url }}"
      data-variant-id="{{ product.selected_or_first_available_variant.id }}"
      data-has-only-default-variant="{{ product.has_only_default_variant }}"
    >
      <template>
        <pickup-availability-preview class="pickup-availability-preview">
          {% render 'icon-unavailable' %}
          <div class="pickup-availability-info">
            <p class="caption-large">{{ 'products.product.pickup_availability.unavailable' | t }}</p>
            <button class="pickup-availability-button link link--text underlined-link">
              {{ 'products.product.pickup_availability.refresh' | t }}
            </button>
          </div>
        </pickup-availability-preview>
      </template>
    </pickup-availability>

    <script src="{{ 'pickup-availability.js' | asset_url }}" defer="defer"></script>
  {%- endif -%}
</div>
<script>
    async function checkoutFunctionality(event) {
      console.log("buy now");
      event.preventDefault();

      let size_input = document.querySelector('input[type="radio"][data-size="size"]:checked');
      if(size_input == null){
        document.querySelectorAll(".product-form__error-message-wrapper").forEach((e)=>{ e.removeAttribute("hidden") }); 
      }
      {% comment %} document.querySelectorAll('[data-testid=Checkout-button]')[1].removeAttribute('disabled'); {% endcomment %}
      {% comment %} document.querySelector('[data-testid=Checkout-button]').click(); {% endcomment %}

      let atc_value = document.querySelector('.product-variant-id')?.value;
      if(!atc_value){
      document.querySelector('.shopify-payment-button__button').setAttribute('disabled',true);
      console.log('disabled');
      }
      else{
        console.log('Abled');
        document.querySelector('.shopify-payment-button__button').setAttribute('disabled',false);
        const custom_checkout  = await clearShopifyCart(atc_value);
      }
   
    }



    async function clearShopifyCart(atc_value) {
      console.log("hello");
      try {
        const response = await fetch('/cart/clear.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          },
        });

        if (!response.ok) {
          throw new Error('Error clearing cart');
        }
        const data = await response.json();
        // Check if the cart was successfully cleared
        if (data.item_count === 0) {
          customBuyButtonFunctionality(atc_value)
          // You can any additional actions you want to perform after clearing the cart here.
        } else {
          console.error('Error clearing cart:', data);
        }
      } catch (error) {
        console.error('Error clearing cart:', error);
      }
    }


    async function addToCartCustom(variantId) {

    // Create the request data
    const requestData = {
      items: [
        {
          id: variantId,
          quantity: 1,

        },
      ],

    };

    try {
      // Send a POST request to cart/add.js
      const response = await fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest' // Shopify expects this header for AJAX requests
        },
        body: JSON.stringify(requestData)
      });

      // Handle the response data
      const data = await response.json();
      // Return the response data if needed
      return data;
    } catch (error) {
      console.error('Error adding product to cart:', error);
      throw error; // Rethrow the error if you want to handle it further
    }
  }

    function customBuyButtonFunctionality(variantId){
    addToCartCustom(variantId)
      .then(() => {
        location.href="/checkout"
      })
      .catch((error) => {
        console.error(error.message)
      });
    }
</script>
